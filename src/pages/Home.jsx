import React, { useRef } from 'react';
import qs from 'qs';
import { useSelector, useDispatch } from 'react-redux';
import { Link, useNavigate } from 'react-router-dom';

import { setCategoryId, setFilters } from '../redux/slices/filterSlice';
import { SearchContext } from '../App';
import Categories from '../component/Categories';
import PizzaBlock from '../component/PizzaBlock/PizzaBlock';
import Skeleton from '../component/PizzaBlock/Skeleton';
import Pogination from '../component/Pogination';
import Sort, { popupList } from '../component/Sort';
import { fetchPizzas } from '../redux/slices/pizzasSlice';

export const HomeContext = React.createContext('');

const Home = () => {
  const { categoryId, sortType, currentPage } = useSelector((state) => state.filter);
  const { items, status } = useSelector((state) => state.pizza);
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const isSearch = useRef(false);
  const isMounted = useRef(false);

  const { searchVaalue } = React.useContext(SearchContext);

  const onChangeCategory = (id) => {
    dispatch(setCategoryId(id));
  };

  const getPizzas = async () => {
    const sortBy = sortType.sortProperty.replace('-', '');
    const category = categoryId > 0 ? `category=${categoryId}` : '';
    const order = sortType.sortProperty.includes('-') ? 'asc' : 'desc';
    const search = searchVaalue ? `&search=${searchVaalue}` : ''; // Search –≤ beck-end –¥–µ mockapi –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ(category), —Ä–∞–±–æ—Ç–∞—Ç–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –∏–∑-–∑–∞ —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ–Ω–∏–ª –º–µ—Ç–æ–¥ filter()

    dispatch(
      fetchPizzas({
        sortBy,
        category,
        order,
        search,
        currentPage,
      }),
    );

    window.scrollTo(0, 0);
  };

  React.useEffect(() => {
    if (isMounted.current) {
      const queryString = qs.stringify({
        sortType: sortType,
        categoryId,
        currentPage,
      });
      navigate(`?${queryString}`);
    }
    isMounted.current = true;
  }, [categoryId, sortType, searchVaalue, currentPage]);

  React.useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1));
      const sort = popupList.find((obj) => obj.sortType === params.sortType);
      dispatch(
        setFilters({
          ...params,
          sort,
        }),
      );
      isSearch.current = true;
    }
  }, []);

  React.useEffect(() => {
    getPizzas();
    isSearch.current = false;
    window.scrollTo(0, 0);
  }, [categoryId, sortType, searchVaalue, currentPage]);

  const pizzas = items
    .filter((obj) => {
      if (obj.name.toLowerCase().includes(searchVaalue.toLowerCase())) {
        return true;
      }
      return false;
    })
    .map((obj) => <PizzaBlock key={obj.id} {...obj} />);

  const skeletons = [...new Array(9)].map((_, index) => <Skeleton key={index} />);

  return (
    <>
      <div className="content__top">
        <Categories categoryId={categoryId} onChangeCategory={onChangeCategory} /> <Sort />
      </div>{' '}
      <h2 className="content__title"> –í—Å–µ –ø–∏—Ü—Ü—ã </h2>{' '}
      {status === 'error' ? (
        <div className="cart cart--empty" style={{ margin: '30px auto 80px auto' }}>
          <h2>
            –ü–∏—Ü—Ü–∏ –æ—Ç—Å—É—Å—Ç–≤—É—é—Ç <b> üòï </b>{' '}
          </h2>{' '}
          <p> –í–µ—Ä–æ—è—Ç–Ω–µ–π –≤—Å–µ–≥–æ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —á—Ç–æ - —Ç–æ –Ω–µ —Ç–∞–∫ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ </p>{' '}
        </div>
      ) : (
        <div className="content__items"> {status === 'loading' ? skeletons : pizzas} </div>
      )}{' '}
      <Pogination />
    </>
  );
};

export default Home;
